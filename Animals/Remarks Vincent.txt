Dag Lindsey,

ook hier dezelfde opmerking.
- Je variabelen "private" maken, van buiten de klasse dog mogen ze niet zichtbaar zijn. 
* ok

- Ik ga ervan uit dat dit oefening 12.01 is :-)
* Idd

- Probeer je klasses in een aparte file te steken.
* Dog.cs. correct? 
VVDW: Ja

- Property AgeDog.
  - Vreemd dat de getter de hond laat zitten als de leeftijd meer dan 8 is.
    - Is dit je manier van testen?
   * Heb het aangepast 
    - Wie zegt dat je op dat moment al de naam kent? 
      - Altijd als je zo'n dingen doet, de property van de naam gebruiken --> NameDog
      - En NameDog laat je hond blaffen.
    - Dus als je de naam vraagt, blaft de hond.
    * Dat was de bedoeling maar heb het aangepast
VVDW: Veel beter

    - Opletten met je commentaar.
      - Let every dog bark, dat klopt niet. Het is maar 1 hond die blaft (this) 
      * Aangepast
VVDW: Mooi

- Ik zie dat de getter van KindDog ook de hond laat eten.
  - Ik ga ervan uit dat je hier de dingen wou testen.
  - Nooit doen in echte projecten.
  * Allemaal verwijderd
VVDW: Uitstekend

- Constructor zonder parameters. Check
- Constructor met 1 parameter. Check
- Constructor met meerdee parameters. Voor verbetering vatbaar.
  - Je erft van this(), je zou beter erven van this(strName)
    - Verander dit in je code.
    - Je hebt nu dubbele code "NameDog = strName" (komt in 2 constructors voor)
  - Wat je gemaakt hebt, werkt wel.
  * Aangepast
VVDW: Bij je eerste constructor hoeft this() er niet te staan. Die doet toch niets.
  - Let op de schrijfwijze van property (jij schrijft proporty)

- Opletten met je variabele "_strBark", dit kan verwarrend zijn.
  - Volgens niet verplichte afspraken is een "_" een variabele van een klasse, en hier is het een variabele van een methode.
  - De naam is wel juist, maar kan voor verwarring zorgen.
  * Variable verwijderd
  - De hond beept ook :-)
  * Je moet toch horen dat hij blaft hé :-)
VVDW: Ge hebt gelijk :-)

- Sit
  - Waarom geef je een parameter mee?
  - De parameter is gekend in de klasse, het is namelijk de property "NameDog", maar oppassen hier als je dat doet.
    - Dan kom je in een vreemde situatie terecht.
      - De hond als die zit, vraag je de naam. Maar als je de naam vraagt, dan gaat de hond blaffen.
      - Wil jij dat wel?
        - Je zet "sit", en de hond gaat blaffen als je de property zou gebruiken.

      - De properties beperken dat wat ze moeten doen.
      * Aangepast


- CountDog()
  - Is volledig fout.
  - Telkens je CountDog vraagt, wordt het getal met 1 verhoogd.
  - Het is dan niet dat je "intDogCounter" moet verhogen.
  - Wanneer wel?
  - Ik heb in je testprogramma nog eens extra "CountDog" getoond, om te tonen dat je dan 5 honden hebt.
  - En als ik het nog eens zou tonen, dan heb je er zes.
  * Dit klopt?

VVDW: Nee dit klopt niet, dit is nog steeds volledig fout.

- ofwel gebruik je een automatic property ofwel maak je het zelf.
- Nu hebt je een mix van de twee
  - Je kunt gerust "CountDog" static maken (property)
  - Telkens je een hond maakt, dus in de constructor, moet je CountDog met 1 verhogen.
 

- Je laat in je testprogramma nergens de hond zitten, eten en blaffen (omdat je het via de properties test)
- En je gaat zien dat de sit niet echt praktisch is, omdat je een naam moet meegeven.
* methodes public gemaakt, zodat ik ze in de main ook kan testen.

Dus deze oefening heeft nog een beetje aandacht nodig.
- Maar is als eerste poging bij klasses goed.



